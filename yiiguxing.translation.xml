<application>
  <component name="AppStorage">
    <histories>
      <item value="logical" />
      <item value="retrieve" />
      <item value="Synthetic" />
      <item value="Currency" />
      <item value="jupiter" />
      <item value="perceive" />
      <item value="Infinite" />
      <item value="Manual" />
      <item value="MYBANK DEDUCT" />
      <item value="eligible" />
      <item value="staged" />
      <item value="idempotence" />
      <item value="curator" />
      <item value="surefire" />
      <item value="inheritance" />
      <item value="hints" />
      <item value="criteria" />
      <item value="Listen" />
      <item value="explicitly" />
      <item value="ambiguities" />
      <item value="policies" />
      <item value="manipulating" />
      <item value="upon" />
      <item value="threshold" />
      <item value="particular" />
      <item value="corresponds" />
      <item value="is Eligible" />
      <item value="Scroll" />
      <item value="Examine" />
      <item value="Expenditure" />
      <item value="expenditure" />
      <item value="interoperability" />
      <item value="prevented" />
      <item value="opaque" />
      <item value="compatible" />
      <item value="preclude" />
      <item value="differ" />
      <item value="optimizations" />
      <item value="aggressive" />
      <item value="expose" />
      <item value="raw" />
      <item value="primitive" />
      <item value="essentially" />
      <item value="subsequently" />
      <item value="programmatically" />
      <item value="satisfied" />
      <item value="Explicit" />
      <item value="&lt;p&gt;Root bean definitions may also be used for registering individual bean definitions in the configuration phase. However, since Spring 2.5, the preferred way to register bean definitions programmatically is the {@link GenericBeanDefinition} class. GenericBeanDefinition has the advantage that it allows to dynamically define parent dependencies, not 'hard-coding' the role as a root bean definition." />
      <item value="A root bean definition represents the merged bean definition that backs a specific bean in a Spring BeanFactory at runtime. It might have been created from multiple original bean definitions that inherit from each other, typically registered as {@link GenericBeanDefinition GenericBeanDefinitions}. A root bean definition is essentially the 'unified' bean definition view at runtime." />
      <item value="Stereotype" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="468" />
        <entry key="ENGLISH" value="469" />
        <entry key="FRENCH" value="6" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1657088889017" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>