<application>
  <component name="AppStorage">
    <histories>
      <item value="subsequently" />
      <item value="programmatically" />
      <item value="satisfied" />
      <item value="Explicit" />
      <item value="&lt;p&gt;Root bean definitions may also be used for registering individual bean definitions in the configuration phase. However, since Spring 2.5, the preferred way to register bean definitions programmatically is the {@link GenericBeanDefinition} class. GenericBeanDefinition has the advantage that it allows to dynamically define parent dependencies, not 'hard-coding' the role as a root bean definition." />
      <item value="A root bean definition represents the merged bean definition that backs a specific bean in a Spring BeanFactory at runtime. It might have been created from multiple original bean definitions that inherit from each other, typically registered as {@link GenericBeanDefinition GenericBeanDefinitions}. A root bean definition is essentially the 'unified' bean definition view at runtime." />
      <item value="Stereotype" />
      <item value="typically" />
      <item value="delegate" />
      <item value="Variant" />
      <item value="multiplier" />
      <item value="estimate" />
      <item value="{@link org.springframework.context.annotation.AnnotationConfigApplicationContext} supports {@code @Configuration}-annotated classes as a source of bean definitions." />
      <item value="derive" />
      <item value="Concrete" />
      <item value="refresh" />
      <item value="dimension" />
      <item value="Outcomes" />
      <item value="analogous" />
      <item value="regular" />
      <item value="Infinite" />
      <item value="spare" />
      <item value="Interval" />
      <item value="decrease" />
      <item value="async" />
      <item value="vault" />
      <item value="recipes" />
      <item value="Transmittable" />
      <item value="Damage" />
      <item value="Demand" />
      <item value="constraint" />
      <item value="regarded" />
      <item value="Eligible" />
      <item value="consisting" />
      <item value="Absent" />
      <item value="Closure" />
      <item value="The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates." />
      <item value="The general contract of finalize is that it is invoked if and when the Javaâ„¢ virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an inputoutput connection might perform explicit IO transactions to break the connection before the object is permanently discarded." />
      <item value="contract" />
      <item value="asset Commutation Id" />
      <item value="Specific" />
      <item value="explicitly" />
      <item value="Drain" />
      <item value="wait And Drain" />
      <item value="scale" />
      <item value="precision" />
      <item value="aggregate" />
      <item value="instrument" />
      <item value="Synchronization" />
      <item value="propagated to callers but the transaction still considered as committed." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="420" />
        <entry key="ENGLISH" value="421" />
        <entry key="FRENCH" value="6" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVAK" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1651050879415" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>